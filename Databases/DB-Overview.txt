1. What database models do you know?
	Hierarchical  (tree)
	Network / graph
	Relational (table)
	Object-oriented

2. Which are the main functions performed by a Relational Database Management System (RDBMS)?
	Creating / altering / deleting tables and relationships between them (database schema)
	Adding, changing, deleting, searching and retrieving of data stored in the tables

3. Define what is "table" in database terms.
	A table is a collection of related data held in a structured format within a database. It consists of fields (columns), and rows.
	In relational databases, a table is a set of data elements (values) using a model of vertical columns 
	(which are identified by their name) and horizontal rows, the cell being the unit where a row and column intersect.
	
	It is a collection of rows and columns and made up of small entities called cells. These cells are used to store data and user 
	information in a well structured and organized manner.

4. Explain the difference between a primary and a foreign key.
	Primary key is a column of the table that uniquely identifies its rows (usually its is a number)
	The foreign key is an identifier of a record located in another table (usually its primary key)

5. Explain the different kinds of relationships between tables in relational databases.
	One-to-many – A single record in the first table has many corresponding records in the second table
	Many-to-many – Records in the first table have many corresponding records in the second one and vice versa
	One-to-one – A single record in a table corresponds to a single record in the other table

6. When is a certain database schema normalized? What are the advantages of normalized databases?
	Normalization of the relational schema removes repeating data.

7. What are database integrity constraints and when are they used?
	Integrity constraints ensure data integrity in the database tables.
	They enforce data rules which cannot be violated.

	Primary key constraint
		Ensures that the primary key of a table has unique value for each table row
	Unique key constraint
		Ensures that all values in a certain column (or a group of columns) are unique
	Foreign key constraint
		Ensures that the value in given column is a key from another table
	Check constraint
		Ensures that values in a certain column meet some predefined condition

8. Point out the pros and cons of using indexes in a database.
	Pros: 
	indexes speed up searching of values in a certain column or group of columns 
	indexes can be built-in the table (clustered) or stored externally (non-clustered)
	Cons:
	Adding and deleting records in indexed tables is slower!
	indexes should be used for big tables only (e.g. 50 000 rows)

9. What's the main purpose of the SQL language?
	Standardized declarative language for manipulation of relational databases

10. What are transactions used for? Give an example.
	Transactions are a sequence of database operations which are executed as a single unit:
		Either all of them execute successfully
		Or none of them is executed at all
	Example: 
		A bank transfer from one account into another (withdrawal + deposit)
		If either the withdrawal or the deposit fails the entire operation should be cancelled


11. What is a NoSQL database?
	NoSQL is not a relational database, the reality is that a relational database model may not be the best solution for all situations.
	Use document-based model (non-relational)

12. Explain the classical non-relational data models.
	Document model
		Set of documents, e.g. JSON strings
	Key-value model
		Set of key-value pairs
	Hierarchical key-value
		Hierarchy of key-value pairs
	Wide-column model
		Key-value model with schema
	Object model
		Set of OOP-style objects

13. Give few examples of NoSQL databases and their pros and cons.
	Redis
		Ultra-fast in-memory data structures server
	MongoDB
		Mature and powerful JSON-document database
	CouchDB
		JSON-based document database with REST API
	Cassandra
		Distributed wide-column database

	NoSQL pros:
		Mostly open source.
		Horizontal scalability. There’s no need for complex joins and data can be easily sharded and processed in parallel.
		Support for Map/Reduce. This is a simple paradigm that allows for scaling computation on cluster of computing nodes.
		No need to develop fine-grained data model – it saves development time.
		Easy to use.
		Very fast for adding new data and for simple operations/queries.
		No need to make significant changes in code when data structure is modified.
		Ability to store complex data types (for document based solutions) in a single item of storage.
	Cons:
		Immaturity. Still lots of rough edges.
		Possible database administration issues. NoSQL often sacrifices features that are present in SQL solutions “by default” for 
the sake of performance. For example, one needs to check different data durability modes and journaling in order not to be caught by surprise 	
after a cold restart of the system. Memory consumption is one more important chapter to read up on in 	
the database manual because memory is usually heavily used.
		No indexing support (Some solutions like MongoDB have indexing but it’s not as powerful as in SQL solutions).
		No ACID (Some solutions have just atomicity support on single object level).
		Bad reporting performance.
		Complex consistency models (like eventual consistency). CAP theorem states that it’s not possible to achieve consistency, 
availability and partitioning tolerance at the same time. NoSQL vendors are trying to make their solutions 
as fast as possible and consistency is most typical trade-off.
		Absence of standardization. No standard APIs or query language. It means that migration to a solution from different vendor 
is more costly. Also there are no standard tools (e.g. for reporting)